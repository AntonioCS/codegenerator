<?php
declare(strict_types=1);

namespace Inflyter\CodeGenerator\Type;


class CGFile extends AbstractCGType
{
    private bool $addGeneratedMarker = false;

    private bool $strictTypes = false;

    private ?string $path;

    /**
     * @var array<array<string, string>>
     */
    private array $useStatements = [];

    private ?string $namespace = null;

    public function __construct(?string $name = null, int $indentation = 0)
    {
        parent::__construct(null, $name ?? '', $indentation);
    }

    public function setPath(string $path) : self
    {
        $this->path = $path;
        return $this;
    }

    public function getPath() : ?string
    {
        return $this->path;
    }

    public function isStrictTypes(): bool
    {
        return $this->strictTypes;
    }

    public function setStrictTypes(bool $state): self
    {
        $this->strictTypes = $state;
        return $this;
    }

    public function isAddGeneratedMarker(): bool
    {
        return $this->addGeneratedMarker;
    }

    public function setAddGeneratedMarker(bool $state): self
    {
        $this->addGeneratedMarker = $state;
        return $this;
    }

    public function writeToFile(?string $filePath = null): bool
    {
        if ($filePath === null) {
            if ($this->getPath() !== null) {
                $filePath = $this->getPath();
            } else {
                throw new \RuntimeException('No path given to write file');
            }
        }

        $dir = dirname($filePath);

        if (!is_dir($dir) && !mkdir($dir, 777, true) && !is_dir($dir)) {
            throw new \RuntimeException("Directory '$dir' was not created");
        }

        return file_put_contents($filePath, $this->generateCode()) !== false;
    }

    public function addFunction(string $name): CGFunction
    {
        $func = new CGFunction($this, $name, $this->indentation);

        $this->code[] = $func;

        return $func;
    }

    public function addClass(string $name) : CGClass
    {
        $cg = new CGClass($this, $name, $this->indentation);

        $this->code[] = $cg;

        return $cg;
    }

    public function findClass(string $name) : CGClass
    {
        /** @var ?CGClass $res */
        $res = $this->searchFor(CGClass::class, $name);

        if ($res) {
            return $res;
        }

        throw new \RuntimeException("Class named $name not found in CGFile");
    }

    public function findFunction(string $name) : CGFunction
    {
        /** @var ?CGFunction $res */
        $res = $this->searchFor(CGFunction::class, $name);

        if ($res) {
            return $res;
        }

        throw new \RuntimeException('Function not found');
    }

    public function findClassNoThrow(string $name) : ?CGClass
    {
        /** @var ?CGClass $res */
        $res = $this->searchFor(CGClass::class, $name);

        if ($res) {
            return $res;
        }

        return null;
    }

    public function findFunctionNoThrow(string $name) : ?CGFunction
    {
        /** @var ?CGFunction $res */
        $res = $this->searchFor(CGFunction::class, $name);

        if ($res) {
            return $res;
        }

        return null;
    }

    private function searchFor(string $classType, string $name) : ?object
    {
        foreach ($this->code as $codeLine) {
            if (is_object($codeLine) && $codeLine instanceof $classType && $codeLine->getName() === $name) {
                return $codeLine;
            }
        }

        return null;
    }

    public function generateCode(): string
    {
        $codeBackUp = $this->code;
        $this->clearCode();

        $this
            ->addCodeLine('<?php')
            ->addCodeLineIf($this->isStrictTypes(), 'declare(strict_types=1);')
            ->addBlank()
            ->addCodeBlockIf($this->isAddGeneratedMarker(), $this->getAutoGeneratedMaker())
            ->addCodeLineIf($this->hasNameSpace(), "namespace {$this->getNameSpace()};")
            ->addBlankIf($this->hasNameSpace());

        if (!empty($this->hasUseStatements())) {
            $uses = $this->getUseStatements();
            $preventDuplicates = [];


            foreach ($uses as [$use, $as]) {
                if (isset($preventDuplicates[$use])) {
                    continue;
                }

                $preventDuplicates[$use] = 1;

                $code = "use $use";
                if ($as !== null) {
                    $code .= " as $as";
                }
                $code .= ';';
                $this->addCodeLine($code);
            }

            $this->addBlank();
        }

        $final_code = $this->code;
        $this->code = $codeBackUp;

        return implode("\n", array_merge($final_code, $this->code));
    }

    /**
     * @return static
     */
    public function clearUseStatements() : self
    {
        $this->useStatements = [];
        return $this;
    }

    /**
     * @param string $use
     * @param ?string $as
     * @return static
     */
    public function addUseStatement(string $use, ?string $as = null) : self
    {
        $this->useStatements[] = [$use, $as];
        return $this;
    }

    public function hasUseStatements() : bool
    {
        return !empty($this->useStatements);
    }

    public function getUseStatements() : array
    {
        return $this->useStatements;
    }

    public function setNamespace(string $namespace) : self
    {
        $this->namespace = $namespace;
        return $this;
    }

    public function getNameSpace() : ?string
    {
        return $this->namespace;
    }

    public function hasNameSpace() : bool
    {
        return ($this->namespace !== null && $this->namespace !== '');
    }

    protected function getAutoGeneratedMaker() : string
    {
        $now = (new \DateTime())->format('Y-m-d') ;
        $code[] = '//************************************/';
        $code[] = "//* Auto generated on: $now";
        $code[] = '//************************************/';
        $code[] = '';

        return implode("\n", $code);
    }
}